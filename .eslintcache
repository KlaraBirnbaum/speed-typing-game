[{"C:\\web\\Projects\\speed-typing-game\\src\\index.js":"1","C:\\web\\Projects\\speed-typing-game\\src\\App.js":"2"},{"size":199,"mtime":1609954949710,"results":"3","hashOfConfig":"4"},{"size":1769,"mtime":1610047472899,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"143vbma",{"filePath":"9","messages":"10","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\web\\Projects\\speed-typing-game\\src\\index.js",[],["12","13"],"C:\\web\\Projects\\speed-typing-game\\src\\App.js",["14","15","16"],"import React, { useState, useEffect, useRef } from \"react\";\nimport './App.css';\n\nfunction App() {\n\n  const STARTING_TIME = 15;\n\n  const textAreaRef = useRef(null);\n\n  const [text, setText] = useState(\"\");\n  const [words, setWords] = useState(0);\n  const [startingTime, setStartingTime] = useState(15);\n  const [remainingTime, setRemainingTime] = useState(STARTING_TIME);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n  \n\n  const changeText = (event) => {\n    const {value} = event.target;\n    setText(value);\n  }\n  \n  const wordsCounter = (text) => {\n    if(isTimeRunning === false) {\n      const wordsArr = (text.trim().split(' '));\n      const wordsArrFilter = wordsArr.filter(word => word !== \"\").length;\n      setWords(wordsArrFilter);\n    }\n  }\n\n  useEffect(() => {\n    if(isTimeRunning && remainingTime > 0) {\n      setTimeout(() => {\n        setRemainingTime(time => time - 1);\n      }, 1000);\n    } else if(remainingTime === 0) {\n      endGame();\n    }\n  }, [remainingTime, isTimeRunning]);\n\n  const startGame = () => {\n        setIsTimeRunning(true);\n        setRemainingTime(STARTING_TIME);\n        setWords(0);\n        setText(\"\");\n        textAreaRef.current.disabled = false;\n        textAreaRef.current.focus();\n  }\n\n  const endGame = () => {\n    setIsTimeRunning(false)\n    wordsCounter(text);\n  }\n\n \n  return (\n    <div>\n      <h1>Speed typing game</h1>\n      <textarea name=\"input\" \n                value={text} \n                onChange={changeText} \n                disabled={!isTimeRunning} \n                ref={textAreaRef}\n      />\n      <h4>Remaining: {remainingTime} </h4>\n      <button onClick={startGame} disabled={isTimeRunning}> Start</button>\n      <h1>Your score: {words} words </h1>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","severity":1,"message":"22","line":12,"column":10,"nodeType":"23","messageId":"24","endLine":12,"endColumn":22},{"ruleId":"21","severity":1,"message":"25","line":12,"column":24,"nodeType":"23","messageId":"24","endLine":12,"endColumn":39},{"ruleId":"26","severity":1,"message":"27","line":38,"column":6,"nodeType":"28","endLine":38,"endColumn":36,"suggestions":"29"},"no-native-reassign",["30"],"no-negated-in-lhs",["31"],"no-unused-vars","'startingTime' is assigned a value but never used.","Identifier","unusedVar","'setStartingTime' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'endGame'. Either include it or remove the dependency array.","ArrayExpression",["32"],"no-global-assign","no-unsafe-negation",{"desc":"33","fix":"34"},"Update the dependencies array to be: [remainingTime, isTimeRunning, endGame]",{"range":"35","text":"36"},[981,1011],"[remainingTime, isTimeRunning, endGame]"]